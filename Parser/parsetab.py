
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQEQNEQleftGREATER_THANLESS_THANGTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightNOTrightQMARKCOLONnonassocIFXnonassocELSEAND AS BEGIN BOOL COLON COLON_COLON COMMA DIVIDE DO ELSE END EQEQ EQUAL FALSE FOR FUNK GREATER_THAN GTEQ ID IF INT LBRACE LCURLYEBR LDBLBR LEN LESS_THAN LPAREN LSQBR LSQUAREBR LTEQ MINUS MSTR MSTRING MULTIPLY NEQ NOT NULL NUMBER OR PLUS PRINT QMARK QUESTION RBRACE RCURLYEBR RDBLBR RETURN RETURN_ARROW RPAREN RSQUAREBR SEMI_COLON STR STRING TO TRUE VECTOR WHILEprog : func_listempty :func_list : funk\n                     | funk func_list\n                     | funk : FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LBRACE body RBRACEfunk : FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLONfunk : errorbody : stmt_liststmt_list : stmt\n                     | stmt stmt_list\n                     | stmt : expr SEMI_COLONstmt : expr EQUAL expr SEMI_COLONstmt : defvar SEMI_COLONdefvar : ID COLON_COLON type\n                | ID COLON_COLON type EQUAL exprstmt : PRINT expr SEMI_COLONstmt : IF LDBLBR expr RDBLBR stmt %prec IFXstmt : IF LPAREN expr RPAREN stmt ELSE stmtstmt : WHILE LPAREN expr RPAREN stmtstmt : DO stmt WHILE LPAREN expr RPAREN SEMI_COLONstmt : FOR LPAREN ID EQUAL expr TO expr RPAREN stmtstmt : BEGIN body ENDstmt : RETURN expr SEMI_COLONflist : empty\n                 | ID AS type\n                 | ID AS type COMMA flistclist : empty\n                 | expr\n                 | expr COMMA clisttype : INT\n                | VECTOR\n                | STR\n                | MSTR\n                | BOOL\n                | NULLexpr : expr LSQUAREBR expr RSQUAREBRexpr : LSQUAREBR clist RSQUAREBRexpr : expr QMARK expr COLON exprexpr : expr PLUS expr\n                | expr MINUS expr\n                | expr MULTIPLY expr\n                | expr DIVIDE expr\n                | expr GREATER_THAN expr\n                | expr LESS_THAN expr\n                | expr EQEQ expr\n                | expr GTEQ expr\n                | expr LTEQ expr\n                | expr NEQ expr\n                | expr OR expr\n                | expr AND exprexpr : NOT exprexpr : MINUS exprexpr : ID LPAREN expr RPARENexpr : ID LPAREN clist RPARENexpr : IDexpr : NUMBERexpr : STRING\n                | MSTRINGexpr : TRUE\n                | FALSEexpr : NULLexpr : LPAREN expr RPAREN'
    
_lr_action_items = {'$end':([0,1,2,3,5,6,56,88,],[-5,0,-1,-3,-8,-4,-6,-7,]),'FUNK':([0,3,5,56,88,],[4,4,-8,-6,-7,]),'error':([0,3,5,56,88,],[5,5,-8,-6,-7,]),'ID':([4,8,22,26,27,29,32,35,38,40,41,42,43,44,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,80,108,114,115,117,120,121,123,124,125,126,127,128,132,134,137,139,140,141,143,144,],[7,9,9,28,51,51,28,51,28,28,51,51,51,51,51,-13,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-15,51,51,51,113,-18,-24,-25,51,51,-14,51,28,28,28,51,51,-19,-21,28,51,-20,-22,28,-23,]),'LPAREN':([7,26,27,28,29,32,35,36,37,38,39,40,41,42,43,44,51,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,108,112,114,115,117,120,121,123,124,125,126,127,128,132,134,137,139,140,141,143,144,],[8,29,29,53,29,29,29,77,78,29,80,29,29,29,29,29,53,29,-13,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-15,29,29,29,-18,127,-24,-25,29,29,-14,29,29,29,29,29,29,-19,-21,29,29,-20,-22,29,-23,]),'RPAREN':([8,10,11,14,15,16,17,18,19,20,22,24,45,46,47,48,49,50,51,53,55,84,85,86,87,89,90,92,96,97,98,99,100,101,102,103,104,105,106,107,110,111,116,117,118,119,122,129,131,135,142,],[-2,13,-26,-27,-32,-33,-34,-35,-36,-37,-2,-28,-58,-59,-60,-61,-62,-63,-57,-2,92,-29,-30,-54,-53,118,119,-64,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,125,126,-39,-2,-55,-56,-38,-31,-40,138,143,]),'AS':([9,],[12,]),'INT':([12,21,54,],[15,15,15,]),'VECTOR':([12,21,54,],[16,16,16,]),'STR':([12,21,54,],[17,17,17,]),'MSTR':([12,21,54,],[18,18,18,]),'BOOL':([12,21,54,],[19,19,19,]),'NULL':([12,21,26,27,29,32,35,38,40,41,42,43,44,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,108,114,115,117,120,121,123,124,125,126,127,128,132,134,137,139,140,141,143,144,],[20,20,50,50,50,50,50,50,50,50,50,50,50,50,20,-13,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-15,50,50,50,-18,-24,-25,50,50,-14,50,50,50,50,50,50,-19,-21,50,50,-20,-22,50,-23,]),'LESS_THAN':([13,28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[21,-57,67,-58,-59,-60,-61,-62,-63,-57,67,67,67,67,67,-54,-53,67,-64,67,67,67,-41,-42,-43,-44,-45,-46,67,-48,-49,67,67,67,67,67,67,-39,-55,-56,-38,67,-40,67,67,67,]),'COMMA':([14,15,16,17,18,19,20,45,46,47,48,49,50,51,85,86,87,89,92,96,97,98,99,100,101,102,103,104,105,106,107,116,118,119,122,131,],[22,-32,-33,-34,-35,-36,-37,-58,-59,-60,-61,-62,-63,-57,117,-54,-53,117,-64,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-39,-55,-56,-38,-40,]),'GREATER_THAN':([15,16,17,18,19,20,23,28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-32,-33,-34,-35,-36,-37,25,-57,66,-58,-59,-60,-61,-62,-63,-57,66,66,66,66,66,-54,-53,66,-64,66,66,66,-41,-42,-43,-44,-45,-46,66,-48,-49,66,66,66,66,66,66,-39,-55,-56,-38,66,-40,66,66,66,]),'EQUAL':([15,16,17,18,19,20,28,33,45,46,47,48,49,50,51,86,87,91,92,96,97,98,99,100,101,102,103,104,105,106,107,113,116,118,119,122,131,],[-32,-33,-34,-35,-36,-37,-57,59,-58,-59,-60,-61,-62,-63,-57,-54,-53,120,-64,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,128,-39,-55,-56,-38,-40,]),'SEMI_COLON':([15,16,17,18,19,20,28,33,34,45,46,47,48,49,50,51,52,75,82,86,87,91,92,93,96,97,98,99,100,101,102,103,104,105,106,107,116,118,119,122,130,131,138,],[-32,-33,-34,-35,-36,-37,-57,58,74,-58,-59,-60,-61,-62,-63,-57,88,108,115,-54,-53,-16,-64,121,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-39,-55,-56,-38,-17,-40,141,]),'LBRACE':([25,],[26,]),'RETURN_ARROW':([25,],[27,]),'RBRACE':([26,30,31,32,57,58,74,108,114,115,121,132,134,140,141,144,],[-12,56,-9,-10,-11,-13,-15,-18,-24,-25,-14,-19,-21,-20,-22,-23,]),'PRINT':([26,32,38,40,58,74,108,114,115,121,124,125,126,132,134,137,140,141,143,144,],[35,35,35,35,-13,-15,-18,-24,-25,-14,35,35,35,-19,-21,35,-20,-22,35,-23,]),'IF':([26,32,38,40,58,74,108,114,115,121,124,125,126,132,134,137,140,141,143,144,],[36,36,36,36,-13,-15,-18,-24,-25,-14,36,36,36,-19,-21,36,-20,-22,36,-23,]),'WHILE':([26,32,38,40,58,74,79,108,114,115,121,124,125,126,132,134,137,140,141,143,144,],[37,37,37,37,-13,-15,112,-18,-24,-25,-14,37,37,37,-19,-21,37,-20,-22,37,-23,]),'DO':([26,32,38,40,58,74,108,114,115,121,124,125,126,132,134,137,140,141,143,144,],[38,38,38,38,-13,-15,-18,-24,-25,-14,38,38,38,-19,-21,38,-20,-22,38,-23,]),'FOR':([26,32,38,40,58,74,108,114,115,121,124,125,126,132,134,137,140,141,143,144,],[39,39,39,39,-13,-15,-18,-24,-25,-14,39,39,39,-19,-21,39,-20,-22,39,-23,]),'BEGIN':([26,32,38,40,58,74,108,114,115,121,124,125,126,132,134,137,140,141,143,144,],[40,40,40,40,-13,-15,-18,-24,-25,-14,40,40,40,-19,-21,40,-20,-22,40,-23,]),'RETURN':([26,32,38,40,58,74,108,114,115,121,124,125,126,132,134,137,140,141,143,144,],[41,41,41,41,-13,-15,-18,-24,-25,-14,41,41,41,-19,-21,41,-20,-22,41,-23,]),'LSQUAREBR':([26,27,28,29,32,33,35,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,134,135,136,137,139,140,141,142,143,144,],[42,42,-57,42,42,60,42,42,42,42,42,42,42,-58,-59,-60,-61,-62,-63,-57,60,42,60,-13,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-15,60,42,42,42,60,60,-54,-53,60,-64,60,60,60,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-18,60,60,60,-24,-25,-39,42,-55,-56,42,-14,-38,42,42,42,42,42,42,60,-40,-19,-21,60,60,42,42,-20,-22,60,42,-23,]),'NOT':([26,27,29,32,35,38,40,41,42,43,44,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,108,114,115,117,120,121,123,124,125,126,127,128,132,134,137,139,140,141,143,144,],[44,44,44,44,44,44,44,44,44,44,44,44,-13,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-15,44,44,44,-18,-24,-25,44,44,-14,44,44,44,44,44,44,-19,-21,44,44,-20,-22,44,-23,]),'MINUS':([26,27,28,29,32,33,35,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,134,135,136,137,139,140,141,142,143,144,],[43,43,-57,43,43,63,43,43,43,43,43,43,43,-58,-59,-60,-61,-62,-63,-57,63,43,63,-13,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-15,63,43,43,43,63,63,-54,-53,63,-64,63,63,63,-41,-42,-43,-44,63,63,63,63,63,63,63,63,-18,63,63,63,-24,-25,-39,43,-55,-56,43,-14,-38,43,43,43,43,43,43,63,-40,-19,-21,63,63,43,43,-20,-22,63,43,-23,]),'NUMBER':([26,27,29,32,35,38,40,41,42,43,44,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,108,114,115,117,120,121,123,124,125,126,127,128,132,134,137,139,140,141,143,144,],[45,45,45,45,45,45,45,45,45,45,45,45,-13,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-15,45,45,45,-18,-24,-25,45,45,-14,45,45,45,45,45,45,-19,-21,45,45,-20,-22,45,-23,]),'STRING':([26,27,29,32,35,38,40,41,42,43,44,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,108,114,115,117,120,121,123,124,125,126,127,128,132,134,137,139,140,141,143,144,],[46,46,46,46,46,46,46,46,46,46,46,46,-13,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-15,46,46,46,-18,-24,-25,46,46,-14,46,46,46,46,46,46,-19,-21,46,46,-20,-22,46,-23,]),'MSTRING':([26,27,29,32,35,38,40,41,42,43,44,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,108,114,115,117,120,121,123,124,125,126,127,128,132,134,137,139,140,141,143,144,],[47,47,47,47,47,47,47,47,47,47,47,47,-13,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-15,47,47,47,-18,-24,-25,47,47,-14,47,47,47,47,47,47,-19,-21,47,47,-20,-22,47,-23,]),'TRUE':([26,27,29,32,35,38,40,41,42,43,44,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,108,114,115,117,120,121,123,124,125,126,127,128,132,134,137,139,140,141,143,144,],[48,48,48,48,48,48,48,48,48,48,48,48,-13,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-15,48,48,48,-18,-24,-25,48,48,-14,48,48,48,48,48,48,-19,-21,48,48,-20,-22,48,-23,]),'FALSE':([26,27,29,32,35,38,40,41,42,43,44,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,108,114,115,117,120,121,123,124,125,126,127,128,132,134,137,139,140,141,143,144,],[49,49,49,49,49,49,49,49,49,49,49,49,-13,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-15,49,49,49,-18,-24,-25,49,49,-14,49,49,49,49,49,49,-19,-21,49,49,-20,-22,49,-23,]),'QMARK':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,61,-58,-59,-60,-61,-62,-63,-57,61,61,61,61,61,61,61,61,-64,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-39,-55,-56,-38,61,61,61,61,61,]),'PLUS':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,62,-58,-59,-60,-61,-62,-63,-57,62,62,62,62,62,-54,-53,62,-64,62,62,62,-41,-42,-43,-44,62,62,62,62,62,62,62,62,62,62,62,-39,-55,-56,-38,62,-40,62,62,62,]),'MULTIPLY':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,64,-58,-59,-60,-61,-62,-63,-57,64,64,64,64,64,64,-53,64,-64,64,64,64,64,64,-43,-44,64,64,64,64,64,64,64,64,64,64,64,-39,-55,-56,-38,64,-40,64,64,64,]),'DIVIDE':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,65,-58,-59,-60,-61,-62,-63,-57,65,65,65,65,65,65,-53,65,-64,65,65,65,65,65,-43,-44,65,65,65,65,65,65,65,65,65,65,65,-39,-55,-56,-38,65,-40,65,65,65,]),'EQEQ':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,68,-58,-59,-60,-61,-62,-63,-57,68,68,68,68,68,-54,-53,68,-64,68,68,68,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,68,68,68,68,68,-39,-55,-56,-38,68,-40,68,68,68,]),'GTEQ':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,69,-58,-59,-60,-61,-62,-63,-57,69,69,69,69,69,-54,-53,69,-64,69,69,69,-41,-42,-43,-44,-45,-46,69,-48,-49,69,69,69,69,69,69,-39,-55,-56,-38,69,-40,69,69,69,]),'LTEQ':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,70,-58,-59,-60,-61,-62,-63,-57,70,70,70,70,70,-54,-53,70,-64,70,70,70,-41,-42,-43,-44,-45,-46,70,-48,-49,70,70,70,70,70,70,-39,-55,-56,-38,70,-40,70,70,70,]),'NEQ':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,71,-58,-59,-60,-61,-62,-63,-57,71,71,71,71,71,-54,-53,71,-64,71,71,71,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,71,71,71,71,71,-39,-55,-56,-38,71,-40,71,71,71,]),'OR':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,72,-58,-59,-60,-61,-62,-63,-57,72,72,72,72,72,-54,-53,72,-64,72,72,72,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,72,72,72,-39,-55,-56,-38,72,-40,72,72,72,]),'AND':([28,33,45,46,47,48,49,50,51,52,55,75,82,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,116,118,119,122,130,131,135,136,142,],[-57,73,-58,-59,-60,-61,-62,-63,-57,73,73,73,73,73,-54,-53,73,-64,73,73,73,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,73,-52,73,73,73,-39,-55,-56,-38,73,-40,73,73,73,]),'COLON_COLON':([28,],[54,]),'END':([31,32,40,57,58,74,81,108,114,115,121,132,134,140,141,144,],[-9,-10,-12,-11,-13,-15,114,-18,-24,-25,-14,-19,-21,-20,-22,-23,]),'LDBLBR':([36,],[76,]),'RSQUAREBR':([42,45,46,47,48,49,50,51,83,84,85,86,87,92,94,96,97,98,99,100,101,102,103,104,105,106,107,116,117,118,119,122,129,131,],[-2,-58,-59,-60,-61,-62,-63,-57,116,-29,-30,-54,-53,-64,122,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-39,-2,-55,-56,-38,-31,-40,]),'COLON':([45,46,47,48,49,50,51,86,87,92,95,96,97,98,99,100,101,102,103,104,105,106,107,116,118,119,122,131,],[-58,-59,-60,-61,-62,-63,-57,-54,-53,-64,123,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-39,-55,-56,-38,-40,]),'RDBLBR':([45,46,47,48,49,50,51,86,87,92,96,97,98,99,100,101,102,103,104,105,106,107,109,116,118,119,122,131,],[-58,-59,-60,-61,-62,-63,-57,-54,-53,-64,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,124,-39,-55,-56,-38,-40,]),'TO':([45,46,47,48,49,50,51,86,87,92,96,97,98,99,100,101,102,103,104,105,106,107,116,118,119,122,131,136,],[-58,-59,-60,-61,-62,-63,-57,-54,-53,-64,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-39,-55,-56,-38,-40,139,]),'ELSE':([58,74,108,114,115,121,132,133,134,140,141,144,],[-13,-15,-18,-24,-25,-14,-19,137,-21,-20,-22,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'func_list':([0,3,],[2,6,]),'funk':([0,3,],[3,3,]),'flist':([8,22,],[10,24,]),'empty':([8,22,42,53,117,],[11,11,84,84,84,]),'type':([12,21,54,],[14,23,91,]),'body':([26,40,],[30,81,]),'stmt_list':([26,32,40,],[31,57,31,]),'stmt':([26,32,38,40,124,125,126,137,143,],[32,32,79,32,132,133,134,140,144,]),'expr':([26,27,29,32,35,38,40,41,42,43,44,53,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,77,78,117,120,123,124,125,126,127,128,137,139,143,],[33,52,55,33,75,33,33,82,85,86,87,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,85,130,131,33,33,33,135,136,33,142,33,]),'defvar':([26,32,38,40,124,125,126,137,143,],[34,34,34,34,34,34,34,34,34,]),'clist':([42,53,117,],[83,90,129,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> func_list','prog',1,'p_prog','grammar.py',33),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',37),
  ('func_list -> funk','func_list',1,'p_func_list','grammar.py',42),
  ('func_list -> funk func_list','func_list',2,'p_func_list','grammar.py',43),
  ('func_list -> <empty>','func_list',0,'p_func_list','grammar.py',44),
  ('funk -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LBRACE body RBRACE','funk',11,'p_func_with_body','grammar.py',54),
  ('funk -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON','funk',11,'p_func_without_body','grammar.py',67),
  ('funk -> error','funk',1,'p_func_error','grammar.py',80),
  ('body -> stmt_list','body',1,'p_body','grammar.py',87),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','grammar.py',92),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','grammar.py',93),
  ('stmt_list -> <empty>','stmt_list',0,'p_stmt_list','grammar.py',94),
  ('stmt -> expr SEMI_COLON','stmt',2,'p_stmt_expr','grammar.py',105),
  ('stmt -> expr EQUAL expr SEMI_COLON','stmt',4,'p_stmt_assign','grammar.py',110),
  ('stmt -> defvar SEMI_COLON','stmt',2,'p_stmt_defvar','grammar.py',116),
  ('defvar -> ID COLON_COLON type','defvar',3,'p_defvar','grammar.py',121),
  ('defvar -> ID COLON_COLON type EQUAL expr','defvar',5,'p_defvar','grammar.py',122),
  ('stmt -> PRINT expr SEMI_COLON','stmt',3,'p_stmt_print','grammar.py',132),
  ('stmt -> IF LDBLBR expr RDBLBR stmt','stmt',5,'p_stmt_if','grammar.py',137),
  ('stmt -> IF LPAREN expr RPAREN stmt ELSE stmt','stmt',7,'p_stmt_if_else','grammar.py',144),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt_while','grammar.py',151),
  ('stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON','stmt',7,'p_stmt_do_while','grammar.py',158),
  ('stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt','stmt',9,'p_stmt_for','grammar.py',165),
  ('stmt -> BEGIN body END','stmt',3,'p_stmt_begin_end','grammar.py',170),
  ('stmt -> RETURN expr SEMI_COLON','stmt',3,'p_stmt_return','grammar.py',175),
  ('flist -> empty','flist',1,'p_flist','grammar.py',182),
  ('flist -> ID AS type','flist',3,'p_flist','grammar.py',183),
  ('flist -> ID AS type COMMA flist','flist',5,'p_flist','grammar.py',184),
  ('clist -> empty','clist',1,'p_clist','grammar.py',200),
  ('clist -> expr','clist',1,'p_clist','grammar.py',201),
  ('clist -> expr COMMA clist','clist',3,'p_clist','grammar.py',202),
  ('type -> INT','type',1,'p_type','grammar.py',213),
  ('type -> VECTOR','type',1,'p_type','grammar.py',214),
  ('type -> STR','type',1,'p_type','grammar.py',215),
  ('type -> MSTR','type',1,'p_type','grammar.py',216),
  ('type -> BOOL','type',1,'p_type','grammar.py',217),
  ('type -> NULL','type',1,'p_type','grammar.py',218),
  ('expr -> expr LSQUAREBR expr RSQUAREBR','expr',4,'p_expr_array_indexing','grammar.py',224),
  ('expr -> LSQUAREBR clist RSQUAREBR','expr',3,'p_expr_clist','grammar.py',230),
  ('expr -> expr QMARK expr COLON expr','expr',5,'p_expr_ternary','grammar.py',236),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','grammar.py',242),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','grammar.py',243),
  ('expr -> expr MULTIPLY expr','expr',3,'p_expr_binary','grammar.py',244),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binary','grammar.py',245),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr_binary','grammar.py',246),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr_binary','grammar.py',247),
  ('expr -> expr EQEQ expr','expr',3,'p_expr_binary','grammar.py',248),
  ('expr -> expr GTEQ expr','expr',3,'p_expr_binary','grammar.py',249),
  ('expr -> expr LTEQ expr','expr',3,'p_expr_binary','grammar.py',250),
  ('expr -> expr NEQ expr','expr',3,'p_expr_binary','grammar.py',251),
  ('expr -> expr OR expr','expr',3,'p_expr_binary','grammar.py',252),
  ('expr -> expr AND expr','expr',3,'p_expr_binary','grammar.py',253),
  ('expr -> NOT expr','expr',2,'p_expr_not','grammar.py',271),
  ('expr -> MINUS expr','expr',2,'p_expr_unary_minus','grammar.py',277),
  ('expr -> ID LPAREN expr RPAREN','expr',4,'p_expr_list','grammar.py',283),
  ('expr -> ID LPAREN clist RPAREN','expr',4,'p_expr_func_call','grammar.py',293),
  ('expr -> ID','expr',1,'p_expr_iden','grammar.py',304),
  ('expr -> NUMBER','expr',1,'p_expr_number','grammar.py',309),
  ('expr -> STRING','expr',1,'p_expr_string','grammar.py',315),
  ('expr -> MSTRING','expr',1,'p_expr_string','grammar.py',316),
  ('expr -> TRUE','expr',1,'p_expr_bool','grammar.py',322),
  ('expr -> FALSE','expr',1,'p_expr_bool','grammar.py',323),
  ('expr -> NULL','expr',1,'p_expr_null','grammar.py',329),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_parens','grammar.py',335),
]
