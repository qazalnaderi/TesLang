Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LEN
    LSQBR
    QUESTION

Grammar

Rule 0     S' -> prog
Rule 1     prog -> func_list
Rule 2     func_list -> func
Rule 3     func_list -> func func_list
Rule 4     func_list -> <empty>
Rule 5     func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
Rule 6     func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON
Rule 7     func -> error
Rule 8     body -> stmt_list
Rule 9     stmt_list -> stmt
Rule 10    stmt_list -> stmt stmt_list
Rule 11    stmt_list -> <empty>
Rule 12    stmt -> expr SEMI_COLON
Rule 13    stmt -> expr EQUAL expr SEMI_COLON
Rule 14    stmt -> defvar SEMI_COLON
Rule 15    defvar -> ID COLON_COLON type
Rule 16    defvar -> ID COLON_COLON type EQUAL expr
Rule 17    stmt -> PRINT expr SEMI_COLON
Rule 18    stmt -> IF LDBLBR expr RDBLBR stmt
Rule 19    stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 20    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 21    stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
Rule 22    stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
Rule 23    stmt -> BEGIN body END
Rule 24    stmt -> RETURN expr SEMI_COLON
Rule 25    flist -> <empty>
Rule 26    flist -> ID AS type
Rule 27    flist -> ID AS type COMMA flist
Rule 28    clist -> expr
Rule 29    clist -> expr COMMA clist
Rule 30    type -> INT
Rule 31    type -> VECTOR
Rule 32    type -> STR
Rule 33    type -> MSTR
Rule 34    type -> BOOL
Rule 35    type -> NULL
Rule 36    expr -> expr LSQUAREBR expr RSQUAREBR
Rule 37    expr -> LSQUAREBR clist RSQUAREBR
Rule 38    expr -> expr QMARK expr COLON expr
Rule 39    expr -> expr PLUS expr
Rule 40    expr -> expr MINUS expr
Rule 41    expr -> expr MULTIPLY expr
Rule 42    expr -> expr DIVIDE expr
Rule 43    expr -> expr GREATER_THAN expr
Rule 44    expr -> expr LESS_THAN expr
Rule 45    expr -> expr EQEQ expr
Rule 46    expr -> expr GTEQ expr
Rule 47    expr -> expr LTEQ expr
Rule 48    expr -> expr NEQ expr
Rule 49    expr -> expr OR expr
Rule 50    expr -> expr AND expr
Rule 51    expr -> NOT expr
Rule 52    expr -> ID LPAREN expr RPAREN
Rule 53    expr -> ID LPAREN clist RPAREN
Rule 54    expr -> ID
Rule 55    expr -> NUMBER
Rule 56    expr -> STRING
Rule 57    expr -> MSTRING
Rule 58    expr -> TRUE
Rule 59    expr -> FALSE
Rule 60    expr -> NULL
Rule 61    expr -> LPAREN expr RPAREN

Terminals, with rules where they appear

AND                  : 50
AS                   : 26 27
BEGIN                : 23
BOOL                 : 34
COLON                : 38
COLON_COLON          : 15 16
COMMA                : 27 29
DIVIDE               : 42
DO                   : 21
ELSE                 : 19
END                  : 23
EQEQ                 : 45
EQUAL                : 13 16 22
FALSE                : 59
FOR                  : 22
FUNK                 : 5 6
GREATER_THAN         : 5 6 43
GTEQ                 : 46
ID                   : 5 6 15 16 22 26 27 52 53 54
IF                   : 18 19
INT                  : 30
LCURLYEBR            : 5
LDBLBR               : 18
LEN                  : 
LESS_THAN            : 5 6 44
LPAREN               : 5 6 19 20 21 22 52 53 61
LSQBR                : 
LSQUAREBR            : 36 37
LTEQ                 : 47
MINUS                : 40
MSTR                 : 33
MSTRING              : 57
MULTIPLY             : 41
NEQ                  : 48
NOT                  : 51
NULL                 : 35 60
NUMBER               : 55
OR                   : 49
PLUS                 : 39
PRINT                : 17
QMARK                : 38
QUESTION             : 
RCURLYEBR            : 5
RDBLBR               : 18
RETURN               : 24
RETURN_ARROW         : 6
RPAREN               : 5 6 19 20 21 22 52 53 61
RSQUAREBR            : 36 37
SEMI_COLON           : 6 12 13 14 17 21 24
STR                  : 32
STRING               : 56
TO                   : 22
TRUE                 : 58
VECTOR               : 31
WHILE                : 20 21
error                : 7

Nonterminals, with rules where they appear

body                 : 5 23
clist                : 29 37 53
defvar               : 14
expr                 : 6 12 13 13 16 17 18 19 20 21 22 22 24 28 29 36 36 38 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 52 61
flist                : 5 6 27
func                 : 2 3
func_list            : 1 3
prog                 : 0
stmt                 : 9 10 18 19 19 20 21 22
stmt_list            : 8 10
type                 : 5 6 15 16 26 27

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . func_list
    (2) func_list -> . func
    (3) func_list -> . func func_list
    (4) func_list -> .
    (5) func -> . FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON
    (7) func -> . error

    $end            reduce using rule 4 (func_list -> .)
    FUNK            shift and go to state 4
    error           shift and go to state 5

    prog                           shift and go to state 1
    func_list                      shift and go to state 2
    func                           shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> func_list .

    $end            reduce using rule 1 (prog -> func_list .)


state 3

    (2) func_list -> func .
    (3) func_list -> func . func_list
    (2) func_list -> . func
    (3) func_list -> . func func_list
    (4) func_list -> .
    (5) func -> . FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON
    (7) func -> . error

  ! reduce/reduce conflict for $end resolved using rule 2 (func_list -> func .)
    $end            reduce using rule 2 (func_list -> func .)
    FUNK            shift and go to state 4
    error           shift and go to state 5

  ! $end            [ reduce using rule 4 (func_list -> .) ]

    func                           shift and go to state 3
    func_list                      shift and go to state 6

state 4

    (5) func -> FUNK . ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FUNK . ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON

    ID              shift and go to state 7


state 5

    (7) func -> error .

    FUNK            reduce using rule 7 (func -> error .)
    error           reduce using rule 7 (func -> error .)
    $end            reduce using rule 7 (func -> error .)


state 6

    (3) func_list -> func func_list .

    $end            reduce using rule 3 (func_list -> func func_list .)


state 7

    (5) func -> FUNK ID . LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FUNK ID . LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON

    LPAREN          shift and go to state 8


state 8

    (5) func -> FUNK ID LPAREN . flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FUNK ID LPAREN . flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON
    (25) flist -> .
    (26) flist -> . ID AS type
    (27) flist -> . ID AS type COMMA flist

    RPAREN          reduce using rule 25 (flist -> .)
    ID              shift and go to state 9

    flist                          shift and go to state 10

state 9

    (26) flist -> ID . AS type
    (27) flist -> ID . AS type COMMA flist

    AS              shift and go to state 11


state 10

    (5) func -> FUNK ID LPAREN flist . RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FUNK ID LPAREN flist . RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON

    RPAREN          shift and go to state 12


state 11

    (26) flist -> ID AS . type
    (27) flist -> ID AS . type COMMA flist
    (30) type -> . INT
    (31) type -> . VECTOR
    (32) type -> . STR
    (33) type -> . MSTR
    (34) type -> . BOOL
    (35) type -> . NULL

    INT             shift and go to state 14
    VECTOR          shift and go to state 15
    STR             shift and go to state 16
    MSTR            shift and go to state 17
    BOOL            shift and go to state 18
    NULL            shift and go to state 19

    type                           shift and go to state 13

state 12

    (5) func -> FUNK ID LPAREN flist RPAREN . LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FUNK ID LPAREN flist RPAREN . LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON

    LESS_THAN       shift and go to state 20


state 13

    (26) flist -> ID AS type .
    (27) flist -> ID AS type . COMMA flist

    RPAREN          reduce using rule 26 (flist -> ID AS type .)
    COMMA           shift and go to state 21


state 14

    (30) type -> INT .

    COMMA           reduce using rule 30 (type -> INT .)
    RPAREN          reduce using rule 30 (type -> INT .)
    GREATER_THAN    reduce using rule 30 (type -> INT .)
    EQUAL           reduce using rule 30 (type -> INT .)
    SEMI_COLON      reduce using rule 30 (type -> INT .)


state 15

    (31) type -> VECTOR .

    COMMA           reduce using rule 31 (type -> VECTOR .)
    RPAREN          reduce using rule 31 (type -> VECTOR .)
    GREATER_THAN    reduce using rule 31 (type -> VECTOR .)
    EQUAL           reduce using rule 31 (type -> VECTOR .)
    SEMI_COLON      reduce using rule 31 (type -> VECTOR .)


state 16

    (32) type -> STR .

    COMMA           reduce using rule 32 (type -> STR .)
    RPAREN          reduce using rule 32 (type -> STR .)
    GREATER_THAN    reduce using rule 32 (type -> STR .)
    EQUAL           reduce using rule 32 (type -> STR .)
    SEMI_COLON      reduce using rule 32 (type -> STR .)


state 17

    (33) type -> MSTR .

    COMMA           reduce using rule 33 (type -> MSTR .)
    RPAREN          reduce using rule 33 (type -> MSTR .)
    GREATER_THAN    reduce using rule 33 (type -> MSTR .)
    EQUAL           reduce using rule 33 (type -> MSTR .)
    SEMI_COLON      reduce using rule 33 (type -> MSTR .)


state 18

    (34) type -> BOOL .

    COMMA           reduce using rule 34 (type -> BOOL .)
    RPAREN          reduce using rule 34 (type -> BOOL .)
    GREATER_THAN    reduce using rule 34 (type -> BOOL .)
    EQUAL           reduce using rule 34 (type -> BOOL .)
    SEMI_COLON      reduce using rule 34 (type -> BOOL .)


state 19

    (35) type -> NULL .

    COMMA           reduce using rule 35 (type -> NULL .)
    RPAREN          reduce using rule 35 (type -> NULL .)
    GREATER_THAN    reduce using rule 35 (type -> NULL .)
    EQUAL           reduce using rule 35 (type -> NULL .)
    SEMI_COLON      reduce using rule 35 (type -> NULL .)


state 20

    (5) func -> FUNK ID LPAREN flist RPAREN LESS_THAN . type GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FUNK ID LPAREN flist RPAREN LESS_THAN . type GREATER_THAN RETURN_ARROW expr SEMI_COLON
    (30) type -> . INT
    (31) type -> . VECTOR
    (32) type -> . STR
    (33) type -> . MSTR
    (34) type -> . BOOL
    (35) type -> . NULL

    INT             shift and go to state 14
    VECTOR          shift and go to state 15
    STR             shift and go to state 16
    MSTR            shift and go to state 17
    BOOL            shift and go to state 18
    NULL            shift and go to state 19

    type                           shift and go to state 22

state 21

    (27) flist -> ID AS type COMMA . flist
    (25) flist -> .
    (26) flist -> . ID AS type
    (27) flist -> . ID AS type COMMA flist

    RPAREN          reduce using rule 25 (flist -> .)
    ID              shift and go to state 9

    flist                          shift and go to state 23

state 22

    (5) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type . GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type . GREATER_THAN RETURN_ARROW expr SEMI_COLON

    GREATER_THAN    shift and go to state 24


state 23

    (27) flist -> ID AS type COMMA flist .

    RPAREN          reduce using rule 27 (flist -> ID AS type COMMA flist .)


state 24

    (5) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN . LCURLYEBR body RCURLYEBR
    (6) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN . RETURN_ARROW expr SEMI_COLON

    LCURLYEBR       shift and go to state 25
    RETURN_ARROW    shift and go to state 26


state 25

    (5) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR . body RCURLYEBR
    (8) body -> . stmt_list
    (9) stmt_list -> . stmt
    (10) stmt_list -> . stmt stmt_list
    (11) stmt_list -> .
    (12) stmt -> . expr SEMI_COLON
    (13) stmt -> . expr EQUAL expr SEMI_COLON
    (14) stmt -> . defvar SEMI_COLON
    (17) stmt -> . PRINT expr SEMI_COLON
    (18) stmt -> . IF LDBLBR expr RDBLBR stmt
    (19) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (20) stmt -> . WHILE LPAREN expr RPAREN stmt
    (21) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (22) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (23) stmt -> . BEGIN body END
    (24) stmt -> . RETURN expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (15) defvar -> . ID COLON_COLON type
    (16) defvar -> . ID COLON_COLON type EQUAL expr

    RCURLYEBR       reduce using rule 11 (stmt_list -> .)
    PRINT           shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    BEGIN           shift and go to state 39
    RETURN          shift and go to state 40
    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 27
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    body                           shift and go to state 29
    stmt_list                      shift and go to state 30
    stmt                           shift and go to state 31
    expr                           shift and go to state 32
    defvar                         shift and go to state 33

state 26

    (6) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW . expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 50

state 27

    (52) expr -> ID . LPAREN expr RPAREN
    (53) expr -> ID . LPAREN clist RPAREN
    (54) expr -> ID .
    (15) defvar -> ID . COLON_COLON type
    (16) defvar -> ID . COLON_COLON type EQUAL expr

    LPAREN          shift and go to state 51
    SEMI_COLON      reduce using rule 54 (expr -> ID .)
    EQUAL           reduce using rule 54 (expr -> ID .)
    LSQUAREBR       reduce using rule 54 (expr -> ID .)
    QMARK           reduce using rule 54 (expr -> ID .)
    PLUS            reduce using rule 54 (expr -> ID .)
    MINUS           reduce using rule 54 (expr -> ID .)
    MULTIPLY        reduce using rule 54 (expr -> ID .)
    DIVIDE          reduce using rule 54 (expr -> ID .)
    GREATER_THAN    reduce using rule 54 (expr -> ID .)
    LESS_THAN       reduce using rule 54 (expr -> ID .)
    EQEQ            reduce using rule 54 (expr -> ID .)
    GTEQ            reduce using rule 54 (expr -> ID .)
    LTEQ            reduce using rule 54 (expr -> ID .)
    NEQ             reduce using rule 54 (expr -> ID .)
    OR              reduce using rule 54 (expr -> ID .)
    AND             reduce using rule 54 (expr -> ID .)
    COLON_COLON     shift and go to state 52


state 28

    (61) expr -> LPAREN . expr RPAREN
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 53

state 29

    (5) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body . RCURLYEBR

    RCURLYEBR       shift and go to state 54


state 30

    (8) body -> stmt_list .

    RCURLYEBR       reduce using rule 8 (body -> stmt_list .)
    END             reduce using rule 8 (body -> stmt_list .)


state 31

    (9) stmt_list -> stmt .
    (10) stmt_list -> stmt . stmt_list
    (9) stmt_list -> . stmt
    (10) stmt_list -> . stmt stmt_list
    (11) stmt_list -> .
    (12) stmt -> . expr SEMI_COLON
    (13) stmt -> . expr EQUAL expr SEMI_COLON
    (14) stmt -> . defvar SEMI_COLON
    (17) stmt -> . PRINT expr SEMI_COLON
    (18) stmt -> . IF LDBLBR expr RDBLBR stmt
    (19) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (20) stmt -> . WHILE LPAREN expr RPAREN stmt
    (21) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (22) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (23) stmt -> . BEGIN body END
    (24) stmt -> . RETURN expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (15) defvar -> . ID COLON_COLON type
    (16) defvar -> . ID COLON_COLON type EQUAL expr

  ! reduce/reduce conflict for RCURLYEBR resolved using rule 9 (stmt_list -> stmt .)
  ! reduce/reduce conflict for END resolved using rule 9 (stmt_list -> stmt .)
    RCURLYEBR       reduce using rule 9 (stmt_list -> stmt .)
    END             reduce using rule 9 (stmt_list -> stmt .)
    PRINT           shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    BEGIN           shift and go to state 39
    RETURN          shift and go to state 40
    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 27
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

  ! RCURLYEBR       [ reduce using rule 11 (stmt_list -> .) ]
  ! END             [ reduce using rule 11 (stmt_list -> .) ]

    stmt                           shift and go to state 31
    stmt_list                      shift and go to state 55
    expr                           shift and go to state 32
    defvar                         shift and go to state 33

state 32

    (12) stmt -> expr . SEMI_COLON
    (13) stmt -> expr . EQUAL expr SEMI_COLON
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 56
    EQUAL           shift and go to state 57
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 33

    (14) stmt -> defvar . SEMI_COLON

    SEMI_COLON      shift and go to state 72


state 34

    (17) stmt -> PRINT . expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 73

state 35

    (18) stmt -> IF . LDBLBR expr RDBLBR stmt
    (19) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt

    LDBLBR          shift and go to state 74
    LPAREN          shift and go to state 75


state 36

    (20) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 76


state 37

    (21) stmt -> DO . stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (12) stmt -> . expr SEMI_COLON
    (13) stmt -> . expr EQUAL expr SEMI_COLON
    (14) stmt -> . defvar SEMI_COLON
    (17) stmt -> . PRINT expr SEMI_COLON
    (18) stmt -> . IF LDBLBR expr RDBLBR stmt
    (19) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (20) stmt -> . WHILE LPAREN expr RPAREN stmt
    (21) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (22) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (23) stmt -> . BEGIN body END
    (24) stmt -> . RETURN expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (15) defvar -> . ID COLON_COLON type
    (16) defvar -> . ID COLON_COLON type EQUAL expr

    PRINT           shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    BEGIN           shift and go to state 39
    RETURN          shift and go to state 40
    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 27
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    stmt                           shift and go to state 77
    expr                           shift and go to state 32
    defvar                         shift and go to state 33

state 38

    (22) stmt -> FOR . LPAREN ID EQUAL expr TO expr RPAREN stmt

    LPAREN          shift and go to state 78


state 39

    (23) stmt -> BEGIN . body END
    (8) body -> . stmt_list
    (9) stmt_list -> . stmt
    (10) stmt_list -> . stmt stmt_list
    (11) stmt_list -> .
    (12) stmt -> . expr SEMI_COLON
    (13) stmt -> . expr EQUAL expr SEMI_COLON
    (14) stmt -> . defvar SEMI_COLON
    (17) stmt -> . PRINT expr SEMI_COLON
    (18) stmt -> . IF LDBLBR expr RDBLBR stmt
    (19) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (20) stmt -> . WHILE LPAREN expr RPAREN stmt
    (21) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (22) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (23) stmt -> . BEGIN body END
    (24) stmt -> . RETURN expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (15) defvar -> . ID COLON_COLON type
    (16) defvar -> . ID COLON_COLON type EQUAL expr

    END             reduce using rule 11 (stmt_list -> .)
    PRINT           shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    BEGIN           shift and go to state 39
    RETURN          shift and go to state 40
    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 27
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    body                           shift and go to state 79
    stmt_list                      shift and go to state 30
    stmt                           shift and go to state 31
    expr                           shift and go to state 32
    defvar                         shift and go to state 33

state 40

    (24) stmt -> RETURN . expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 80

state 41

    (37) expr -> LSQUAREBR . clist RSQUAREBR
    (28) clist -> . expr
    (29) clist -> . expr COMMA clist
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    clist                          shift and go to state 81
    expr                           shift and go to state 82

state 42

    (51) expr -> NOT . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 83

state 43

    (55) expr -> NUMBER .

    SEMI_COLON      reduce using rule 55 (expr -> NUMBER .)
    EQUAL           reduce using rule 55 (expr -> NUMBER .)
    LSQUAREBR       reduce using rule 55 (expr -> NUMBER .)
    QMARK           reduce using rule 55 (expr -> NUMBER .)
    PLUS            reduce using rule 55 (expr -> NUMBER .)
    MINUS           reduce using rule 55 (expr -> NUMBER .)
    MULTIPLY        reduce using rule 55 (expr -> NUMBER .)
    DIVIDE          reduce using rule 55 (expr -> NUMBER .)
    GREATER_THAN    reduce using rule 55 (expr -> NUMBER .)
    LESS_THAN       reduce using rule 55 (expr -> NUMBER .)
    EQEQ            reduce using rule 55 (expr -> NUMBER .)
    GTEQ            reduce using rule 55 (expr -> NUMBER .)
    LTEQ            reduce using rule 55 (expr -> NUMBER .)
    NEQ             reduce using rule 55 (expr -> NUMBER .)
    OR              reduce using rule 55 (expr -> NUMBER .)
    AND             reduce using rule 55 (expr -> NUMBER .)
    RPAREN          reduce using rule 55 (expr -> NUMBER .)
    COMMA           reduce using rule 55 (expr -> NUMBER .)
    RSQUAREBR       reduce using rule 55 (expr -> NUMBER .)
    COLON           reduce using rule 55 (expr -> NUMBER .)
    RDBLBR          reduce using rule 55 (expr -> NUMBER .)
    TO              reduce using rule 55 (expr -> NUMBER .)


state 44

    (56) expr -> STRING .

    SEMI_COLON      reduce using rule 56 (expr -> STRING .)
    EQUAL           reduce using rule 56 (expr -> STRING .)
    LSQUAREBR       reduce using rule 56 (expr -> STRING .)
    QMARK           reduce using rule 56 (expr -> STRING .)
    PLUS            reduce using rule 56 (expr -> STRING .)
    MINUS           reduce using rule 56 (expr -> STRING .)
    MULTIPLY        reduce using rule 56 (expr -> STRING .)
    DIVIDE          reduce using rule 56 (expr -> STRING .)
    GREATER_THAN    reduce using rule 56 (expr -> STRING .)
    LESS_THAN       reduce using rule 56 (expr -> STRING .)
    EQEQ            reduce using rule 56 (expr -> STRING .)
    GTEQ            reduce using rule 56 (expr -> STRING .)
    LTEQ            reduce using rule 56 (expr -> STRING .)
    NEQ             reduce using rule 56 (expr -> STRING .)
    OR              reduce using rule 56 (expr -> STRING .)
    AND             reduce using rule 56 (expr -> STRING .)
    RPAREN          reduce using rule 56 (expr -> STRING .)
    COMMA           reduce using rule 56 (expr -> STRING .)
    RSQUAREBR       reduce using rule 56 (expr -> STRING .)
    COLON           reduce using rule 56 (expr -> STRING .)
    RDBLBR          reduce using rule 56 (expr -> STRING .)
    TO              reduce using rule 56 (expr -> STRING .)


state 45

    (57) expr -> MSTRING .

    SEMI_COLON      reduce using rule 57 (expr -> MSTRING .)
    EQUAL           reduce using rule 57 (expr -> MSTRING .)
    LSQUAREBR       reduce using rule 57 (expr -> MSTRING .)
    QMARK           reduce using rule 57 (expr -> MSTRING .)
    PLUS            reduce using rule 57 (expr -> MSTRING .)
    MINUS           reduce using rule 57 (expr -> MSTRING .)
    MULTIPLY        reduce using rule 57 (expr -> MSTRING .)
    DIVIDE          reduce using rule 57 (expr -> MSTRING .)
    GREATER_THAN    reduce using rule 57 (expr -> MSTRING .)
    LESS_THAN       reduce using rule 57 (expr -> MSTRING .)
    EQEQ            reduce using rule 57 (expr -> MSTRING .)
    GTEQ            reduce using rule 57 (expr -> MSTRING .)
    LTEQ            reduce using rule 57 (expr -> MSTRING .)
    NEQ             reduce using rule 57 (expr -> MSTRING .)
    OR              reduce using rule 57 (expr -> MSTRING .)
    AND             reduce using rule 57 (expr -> MSTRING .)
    RPAREN          reduce using rule 57 (expr -> MSTRING .)
    COMMA           reduce using rule 57 (expr -> MSTRING .)
    RSQUAREBR       reduce using rule 57 (expr -> MSTRING .)
    COLON           reduce using rule 57 (expr -> MSTRING .)
    RDBLBR          reduce using rule 57 (expr -> MSTRING .)
    TO              reduce using rule 57 (expr -> MSTRING .)


state 46

    (58) expr -> TRUE .

    SEMI_COLON      reduce using rule 58 (expr -> TRUE .)
    EQUAL           reduce using rule 58 (expr -> TRUE .)
    LSQUAREBR       reduce using rule 58 (expr -> TRUE .)
    QMARK           reduce using rule 58 (expr -> TRUE .)
    PLUS            reduce using rule 58 (expr -> TRUE .)
    MINUS           reduce using rule 58 (expr -> TRUE .)
    MULTIPLY        reduce using rule 58 (expr -> TRUE .)
    DIVIDE          reduce using rule 58 (expr -> TRUE .)
    GREATER_THAN    reduce using rule 58 (expr -> TRUE .)
    LESS_THAN       reduce using rule 58 (expr -> TRUE .)
    EQEQ            reduce using rule 58 (expr -> TRUE .)
    GTEQ            reduce using rule 58 (expr -> TRUE .)
    LTEQ            reduce using rule 58 (expr -> TRUE .)
    NEQ             reduce using rule 58 (expr -> TRUE .)
    OR              reduce using rule 58 (expr -> TRUE .)
    AND             reduce using rule 58 (expr -> TRUE .)
    RPAREN          reduce using rule 58 (expr -> TRUE .)
    COMMA           reduce using rule 58 (expr -> TRUE .)
    RSQUAREBR       reduce using rule 58 (expr -> TRUE .)
    COLON           reduce using rule 58 (expr -> TRUE .)
    RDBLBR          reduce using rule 58 (expr -> TRUE .)
    TO              reduce using rule 58 (expr -> TRUE .)


state 47

    (59) expr -> FALSE .

    SEMI_COLON      reduce using rule 59 (expr -> FALSE .)
    EQUAL           reduce using rule 59 (expr -> FALSE .)
    LSQUAREBR       reduce using rule 59 (expr -> FALSE .)
    QMARK           reduce using rule 59 (expr -> FALSE .)
    PLUS            reduce using rule 59 (expr -> FALSE .)
    MINUS           reduce using rule 59 (expr -> FALSE .)
    MULTIPLY        reduce using rule 59 (expr -> FALSE .)
    DIVIDE          reduce using rule 59 (expr -> FALSE .)
    GREATER_THAN    reduce using rule 59 (expr -> FALSE .)
    LESS_THAN       reduce using rule 59 (expr -> FALSE .)
    EQEQ            reduce using rule 59 (expr -> FALSE .)
    GTEQ            reduce using rule 59 (expr -> FALSE .)
    LTEQ            reduce using rule 59 (expr -> FALSE .)
    NEQ             reduce using rule 59 (expr -> FALSE .)
    OR              reduce using rule 59 (expr -> FALSE .)
    AND             reduce using rule 59 (expr -> FALSE .)
    RPAREN          reduce using rule 59 (expr -> FALSE .)
    COMMA           reduce using rule 59 (expr -> FALSE .)
    RSQUAREBR       reduce using rule 59 (expr -> FALSE .)
    COLON           reduce using rule 59 (expr -> FALSE .)
    RDBLBR          reduce using rule 59 (expr -> FALSE .)
    TO              reduce using rule 59 (expr -> FALSE .)


state 48

    (60) expr -> NULL .

    SEMI_COLON      reduce using rule 60 (expr -> NULL .)
    EQUAL           reduce using rule 60 (expr -> NULL .)
    LSQUAREBR       reduce using rule 60 (expr -> NULL .)
    QMARK           reduce using rule 60 (expr -> NULL .)
    PLUS            reduce using rule 60 (expr -> NULL .)
    MINUS           reduce using rule 60 (expr -> NULL .)
    MULTIPLY        reduce using rule 60 (expr -> NULL .)
    DIVIDE          reduce using rule 60 (expr -> NULL .)
    GREATER_THAN    reduce using rule 60 (expr -> NULL .)
    LESS_THAN       reduce using rule 60 (expr -> NULL .)
    EQEQ            reduce using rule 60 (expr -> NULL .)
    GTEQ            reduce using rule 60 (expr -> NULL .)
    LTEQ            reduce using rule 60 (expr -> NULL .)
    NEQ             reduce using rule 60 (expr -> NULL .)
    OR              reduce using rule 60 (expr -> NULL .)
    AND             reduce using rule 60 (expr -> NULL .)
    RPAREN          reduce using rule 60 (expr -> NULL .)
    COMMA           reduce using rule 60 (expr -> NULL .)
    RSQUAREBR       reduce using rule 60 (expr -> NULL .)
    COLON           reduce using rule 60 (expr -> NULL .)
    RDBLBR          reduce using rule 60 (expr -> NULL .)
    TO              reduce using rule 60 (expr -> NULL .)


state 49

    (52) expr -> ID . LPAREN expr RPAREN
    (53) expr -> ID . LPAREN clist RPAREN
    (54) expr -> ID .

    LPAREN          shift and go to state 51
    SEMI_COLON      reduce using rule 54 (expr -> ID .)
    LSQUAREBR       reduce using rule 54 (expr -> ID .)
    QMARK           reduce using rule 54 (expr -> ID .)
    PLUS            reduce using rule 54 (expr -> ID .)
    MINUS           reduce using rule 54 (expr -> ID .)
    MULTIPLY        reduce using rule 54 (expr -> ID .)
    DIVIDE          reduce using rule 54 (expr -> ID .)
    GREATER_THAN    reduce using rule 54 (expr -> ID .)
    LESS_THAN       reduce using rule 54 (expr -> ID .)
    EQEQ            reduce using rule 54 (expr -> ID .)
    GTEQ            reduce using rule 54 (expr -> ID .)
    LTEQ            reduce using rule 54 (expr -> ID .)
    NEQ             reduce using rule 54 (expr -> ID .)
    OR              reduce using rule 54 (expr -> ID .)
    AND             reduce using rule 54 (expr -> ID .)
    RPAREN          reduce using rule 54 (expr -> ID .)
    COMMA           reduce using rule 54 (expr -> ID .)
    RSQUAREBR       reduce using rule 54 (expr -> ID .)
    EQUAL           reduce using rule 54 (expr -> ID .)
    COLON           reduce using rule 54 (expr -> ID .)
    RDBLBR          reduce using rule 54 (expr -> ID .)
    TO              reduce using rule 54 (expr -> ID .)


state 50

    (6) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr . SEMI_COLON
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 84
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 51

    (52) expr -> ID LPAREN . expr RPAREN
    (53) expr -> ID LPAREN . clist RPAREN
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (28) clist -> . expr
    (29) clist -> . expr COMMA clist

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 85
    clist                          shift and go to state 86

state 52

    (15) defvar -> ID COLON_COLON . type
    (16) defvar -> ID COLON_COLON . type EQUAL expr
    (30) type -> . INT
    (31) type -> . VECTOR
    (32) type -> . STR
    (33) type -> . MSTR
    (34) type -> . BOOL
    (35) type -> . NULL

    INT             shift and go to state 14
    VECTOR          shift and go to state 15
    STR             shift and go to state 16
    MSTR            shift and go to state 17
    BOOL            shift and go to state 18
    NULL            shift and go to state 19

    type                           shift and go to state 87

state 53

    (61) expr -> LPAREN expr . RPAREN
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    RPAREN          shift and go to state 88
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 54

    (5) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR .

    FUNK            reduce using rule 5 (func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR .)
    error           reduce using rule 5 (func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR .)
    $end            reduce using rule 5 (func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR .)


state 55

    (10) stmt_list -> stmt stmt_list .

    RCURLYEBR       reduce using rule 10 (stmt_list -> stmt stmt_list .)
    END             reduce using rule 10 (stmt_list -> stmt stmt_list .)


state 56

    (12) stmt -> expr SEMI_COLON .

    PRINT           reduce using rule 12 (stmt -> expr SEMI_COLON .)
    IF              reduce using rule 12 (stmt -> expr SEMI_COLON .)
    WHILE           reduce using rule 12 (stmt -> expr SEMI_COLON .)
    DO              reduce using rule 12 (stmt -> expr SEMI_COLON .)
    FOR             reduce using rule 12 (stmt -> expr SEMI_COLON .)
    BEGIN           reduce using rule 12 (stmt -> expr SEMI_COLON .)
    RETURN          reduce using rule 12 (stmt -> expr SEMI_COLON .)
    LSQUAREBR       reduce using rule 12 (stmt -> expr SEMI_COLON .)
    NOT             reduce using rule 12 (stmt -> expr SEMI_COLON .)
    ID              reduce using rule 12 (stmt -> expr SEMI_COLON .)
    NUMBER          reduce using rule 12 (stmt -> expr SEMI_COLON .)
    STRING          reduce using rule 12 (stmt -> expr SEMI_COLON .)
    MSTRING         reduce using rule 12 (stmt -> expr SEMI_COLON .)
    TRUE            reduce using rule 12 (stmt -> expr SEMI_COLON .)
    FALSE           reduce using rule 12 (stmt -> expr SEMI_COLON .)
    NULL            reduce using rule 12 (stmt -> expr SEMI_COLON .)
    LPAREN          reduce using rule 12 (stmt -> expr SEMI_COLON .)
    RCURLYEBR       reduce using rule 12 (stmt -> expr SEMI_COLON .)
    END             reduce using rule 12 (stmt -> expr SEMI_COLON .)
    ELSE            reduce using rule 12 (stmt -> expr SEMI_COLON .)


state 57

    (13) stmt -> expr EQUAL . expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 89

state 58

    (36) expr -> expr LSQUAREBR . expr RSQUAREBR
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 90

state 59

    (38) expr -> expr QMARK . expr COLON expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 91

state 60

    (39) expr -> expr PLUS . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 92

state 61

    (40) expr -> expr MINUS . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 93

state 62

    (41) expr -> expr MULTIPLY . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 94

state 63

    (42) expr -> expr DIVIDE . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 95

state 64

    (43) expr -> expr GREATER_THAN . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 96

state 65

    (44) expr -> expr LESS_THAN . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 97

state 66

    (45) expr -> expr EQEQ . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 98

state 67

    (46) expr -> expr GTEQ . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 99

state 68

    (47) expr -> expr LTEQ . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 100

state 69

    (48) expr -> expr NEQ . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 101

state 70

    (49) expr -> expr OR . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 102

state 71

    (50) expr -> expr AND . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 103

state 72

    (14) stmt -> defvar SEMI_COLON .

    PRINT           reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    IF              reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    WHILE           reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    DO              reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    FOR             reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    BEGIN           reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    RETURN          reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    LSQUAREBR       reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    NOT             reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    ID              reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    NUMBER          reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    STRING          reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    MSTRING         reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    TRUE            reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    FALSE           reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    NULL            reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    LPAREN          reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    RCURLYEBR       reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    END             reduce using rule 14 (stmt -> defvar SEMI_COLON .)
    ELSE            reduce using rule 14 (stmt -> defvar SEMI_COLON .)


state 73

    (17) stmt -> PRINT expr . SEMI_COLON
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 104
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 74

    (18) stmt -> IF LDBLBR . expr RDBLBR stmt
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 105

state 75

    (19) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 106

state 76

    (20) stmt -> WHILE LPAREN . expr RPAREN stmt
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 107

state 77

    (21) stmt -> DO stmt . WHILE LPAREN expr RPAREN SEMI_COLON

    WHILE           shift and go to state 108


state 78

    (22) stmt -> FOR LPAREN . ID EQUAL expr TO expr RPAREN stmt

    ID              shift and go to state 109


state 79

    (23) stmt -> BEGIN body . END

    END             shift and go to state 110


state 80

    (24) stmt -> RETURN expr . SEMI_COLON
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 111
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 81

    (37) expr -> LSQUAREBR clist . RSQUAREBR

    RSQUAREBR       shift and go to state 112


state 82

    (28) clist -> expr .
    (29) clist -> expr . COMMA clist
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    RSQUAREBR       reduce using rule 28 (clist -> expr .)
    RPAREN          reduce using rule 28 (clist -> expr .)
    COMMA           shift and go to state 113
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 83

    (51) expr -> NOT expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 51 (expr -> NOT expr .)
    EQUAL           reduce using rule 51 (expr -> NOT expr .)
    LSQUAREBR       reduce using rule 51 (expr -> NOT expr .)
    PLUS            reduce using rule 51 (expr -> NOT expr .)
    MINUS           reduce using rule 51 (expr -> NOT expr .)
    MULTIPLY        reduce using rule 51 (expr -> NOT expr .)
    DIVIDE          reduce using rule 51 (expr -> NOT expr .)
    GREATER_THAN    reduce using rule 51 (expr -> NOT expr .)
    LESS_THAN       reduce using rule 51 (expr -> NOT expr .)
    EQEQ            reduce using rule 51 (expr -> NOT expr .)
    GTEQ            reduce using rule 51 (expr -> NOT expr .)
    LTEQ            reduce using rule 51 (expr -> NOT expr .)
    NEQ             reduce using rule 51 (expr -> NOT expr .)
    OR              reduce using rule 51 (expr -> NOT expr .)
    AND             reduce using rule 51 (expr -> NOT expr .)
    RPAREN          reduce using rule 51 (expr -> NOT expr .)
    COMMA           reduce using rule 51 (expr -> NOT expr .)
    RSQUAREBR       reduce using rule 51 (expr -> NOT expr .)
    COLON           reduce using rule 51 (expr -> NOT expr .)
    RDBLBR          reduce using rule 51 (expr -> NOT expr .)
    TO              reduce using rule 51 (expr -> NOT expr .)
    QMARK           shift and go to state 59

  ! QMARK           [ reduce using rule 51 (expr -> NOT expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! MULTIPLY        [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 84

    (6) func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON .

    FUNK            reduce using rule 6 (func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON .)
    error           reduce using rule 6 (func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON .)
    $end            reduce using rule 6 (func -> FUNK ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN RETURN_ARROW expr SEMI_COLON .)


state 85

    (52) expr -> ID LPAREN expr . RPAREN
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr
    (28) clist -> expr .
    (29) clist -> expr . COMMA clist

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 114
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71
    COMMA           shift and go to state 113

  ! RPAREN          [ reduce using rule 28 (clist -> expr .) ]


state 86

    (53) expr -> ID LPAREN clist . RPAREN

    RPAREN          shift and go to state 115


state 87

    (15) defvar -> ID COLON_COLON type .
    (16) defvar -> ID COLON_COLON type . EQUAL expr

    SEMI_COLON      reduce using rule 15 (defvar -> ID COLON_COLON type .)
    EQUAL           shift and go to state 116


state 88

    (61) expr -> LPAREN expr RPAREN .

    SEMI_COLON      reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    LSQUAREBR       reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    QMARK           reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    MULTIPLY        reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    GREATER_THAN    reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    EQEQ            reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    GTEQ            reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    LTEQ            reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    RSQUAREBR       reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    RDBLBR          reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    TO              reduce using rule 61 (expr -> LPAREN expr RPAREN .)


state 89

    (13) stmt -> expr EQUAL expr . SEMI_COLON
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 117
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 90

    (36) expr -> expr LSQUAREBR expr . RSQUAREBR
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    RSQUAREBR       shift and go to state 118
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 91

    (38) expr -> expr QMARK expr . COLON expr
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    COLON           shift and go to state 119
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 92

    (39) expr -> expr PLUS expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 39 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 39 (expr -> expr PLUS expr .)
    LSQUAREBR       reduce using rule 39 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 39 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 39 (expr -> expr PLUS expr .)
    GREATER_THAN    reduce using rule 39 (expr -> expr PLUS expr .)
    LESS_THAN       reduce using rule 39 (expr -> expr PLUS expr .)
    EQEQ            reduce using rule 39 (expr -> expr PLUS expr .)
    GTEQ            reduce using rule 39 (expr -> expr PLUS expr .)
    LTEQ            reduce using rule 39 (expr -> expr PLUS expr .)
    NEQ             reduce using rule 39 (expr -> expr PLUS expr .)
    OR              reduce using rule 39 (expr -> expr PLUS expr .)
    AND             reduce using rule 39 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 39 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 39 (expr -> expr PLUS expr .)
    RSQUAREBR       reduce using rule 39 (expr -> expr PLUS expr .)
    COLON           reduce using rule 39 (expr -> expr PLUS expr .)
    RDBLBR          reduce using rule 39 (expr -> expr PLUS expr .)
    TO              reduce using rule 39 (expr -> expr PLUS expr .)
    QMARK           shift and go to state 59
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63

  ! QMARK           [ reduce using rule 39 (expr -> expr PLUS expr .) ]
  ! MULTIPLY        [ reduce using rule 39 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> expr PLUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 93

    (40) expr -> expr MINUS expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 40 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 40 (expr -> expr MINUS expr .)
    LSQUAREBR       reduce using rule 40 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 40 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 40 (expr -> expr MINUS expr .)
    GREATER_THAN    reduce using rule 40 (expr -> expr MINUS expr .)
    LESS_THAN       reduce using rule 40 (expr -> expr MINUS expr .)
    EQEQ            reduce using rule 40 (expr -> expr MINUS expr .)
    GTEQ            reduce using rule 40 (expr -> expr MINUS expr .)
    LTEQ            reduce using rule 40 (expr -> expr MINUS expr .)
    NEQ             reduce using rule 40 (expr -> expr MINUS expr .)
    OR              reduce using rule 40 (expr -> expr MINUS expr .)
    AND             reduce using rule 40 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 40 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 40 (expr -> expr MINUS expr .)
    RSQUAREBR       reduce using rule 40 (expr -> expr MINUS expr .)
    COLON           reduce using rule 40 (expr -> expr MINUS expr .)
    RDBLBR          reduce using rule 40 (expr -> expr MINUS expr .)
    TO              reduce using rule 40 (expr -> expr MINUS expr .)
    QMARK           shift and go to state 59
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63

  ! QMARK           [ reduce using rule 40 (expr -> expr MINUS expr .) ]
  ! MULTIPLY        [ reduce using rule 40 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> expr MINUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 94

    (41) expr -> expr MULTIPLY expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 41 (expr -> expr MULTIPLY expr .)
    EQUAL           reduce using rule 41 (expr -> expr MULTIPLY expr .)
    LSQUAREBR       reduce using rule 41 (expr -> expr MULTIPLY expr .)
    PLUS            reduce using rule 41 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 41 (expr -> expr MULTIPLY expr .)
    MULTIPLY        reduce using rule 41 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 41 (expr -> expr MULTIPLY expr .)
    GREATER_THAN    reduce using rule 41 (expr -> expr MULTIPLY expr .)
    LESS_THAN       reduce using rule 41 (expr -> expr MULTIPLY expr .)
    EQEQ            reduce using rule 41 (expr -> expr MULTIPLY expr .)
    GTEQ            reduce using rule 41 (expr -> expr MULTIPLY expr .)
    LTEQ            reduce using rule 41 (expr -> expr MULTIPLY expr .)
    NEQ             reduce using rule 41 (expr -> expr MULTIPLY expr .)
    OR              reduce using rule 41 (expr -> expr MULTIPLY expr .)
    AND             reduce using rule 41 (expr -> expr MULTIPLY expr .)
    RPAREN          reduce using rule 41 (expr -> expr MULTIPLY expr .)
    COMMA           reduce using rule 41 (expr -> expr MULTIPLY expr .)
    RSQUAREBR       reduce using rule 41 (expr -> expr MULTIPLY expr .)
    COLON           reduce using rule 41 (expr -> expr MULTIPLY expr .)
    RDBLBR          reduce using rule 41 (expr -> expr MULTIPLY expr .)
    TO              reduce using rule 41 (expr -> expr MULTIPLY expr .)
    QMARK           shift and go to state 59

  ! QMARK           [ reduce using rule 41 (expr -> expr MULTIPLY expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! MULTIPLY        [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 95

    (42) expr -> expr DIVIDE expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 42 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 42 (expr -> expr DIVIDE expr .)
    LSQUAREBR       reduce using rule 42 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 42 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 42 (expr -> expr DIVIDE expr .)
    MULTIPLY        reduce using rule 42 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 42 (expr -> expr DIVIDE expr .)
    GREATER_THAN    reduce using rule 42 (expr -> expr DIVIDE expr .)
    LESS_THAN       reduce using rule 42 (expr -> expr DIVIDE expr .)
    EQEQ            reduce using rule 42 (expr -> expr DIVIDE expr .)
    GTEQ            reduce using rule 42 (expr -> expr DIVIDE expr .)
    LTEQ            reduce using rule 42 (expr -> expr DIVIDE expr .)
    NEQ             reduce using rule 42 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 42 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 42 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 42 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 42 (expr -> expr DIVIDE expr .)
    RSQUAREBR       reduce using rule 42 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 42 (expr -> expr DIVIDE expr .)
    RDBLBR          reduce using rule 42 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 42 (expr -> expr DIVIDE expr .)
    QMARK           shift and go to state 59

  ! QMARK           [ reduce using rule 42 (expr -> expr DIVIDE expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! MULTIPLY        [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 96

    (43) expr -> expr GREATER_THAN expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    EQUAL           reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    LSQUAREBR       reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    GREATER_THAN    reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    LESS_THAN       reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    EQEQ            reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    GTEQ            reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    LTEQ            reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    NEQ             reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    OR              reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    AND             reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    RPAREN          reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    RSQUAREBR       reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    COLON           reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    RDBLBR          reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    TO              reduce using rule 43 (expr -> expr GREATER_THAN expr .)
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63

  ! QMARK           [ reduce using rule 43 (expr -> expr GREATER_THAN expr .) ]
  ! PLUS            [ reduce using rule 43 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr GREATER_THAN expr .) ]
  ! MULTIPLY        [ reduce using rule 43 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 43 (expr -> expr GREATER_THAN expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 97

    (44) expr -> expr LESS_THAN expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 44 (expr -> expr LESS_THAN expr .)
    EQUAL           reduce using rule 44 (expr -> expr LESS_THAN expr .)
    LSQUAREBR       reduce using rule 44 (expr -> expr LESS_THAN expr .)
    GREATER_THAN    reduce using rule 44 (expr -> expr LESS_THAN expr .)
    LESS_THAN       reduce using rule 44 (expr -> expr LESS_THAN expr .)
    EQEQ            reduce using rule 44 (expr -> expr LESS_THAN expr .)
    GTEQ            reduce using rule 44 (expr -> expr LESS_THAN expr .)
    LTEQ            reduce using rule 44 (expr -> expr LESS_THAN expr .)
    NEQ             reduce using rule 44 (expr -> expr LESS_THAN expr .)
    OR              reduce using rule 44 (expr -> expr LESS_THAN expr .)
    AND             reduce using rule 44 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 44 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 44 (expr -> expr LESS_THAN expr .)
    RSQUAREBR       reduce using rule 44 (expr -> expr LESS_THAN expr .)
    COLON           reduce using rule 44 (expr -> expr LESS_THAN expr .)
    RDBLBR          reduce using rule 44 (expr -> expr LESS_THAN expr .)
    TO              reduce using rule 44 (expr -> expr LESS_THAN expr .)
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63

  ! QMARK           [ reduce using rule 44 (expr -> expr LESS_THAN expr .) ]
  ! PLUS            [ reduce using rule 44 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 44 (expr -> expr LESS_THAN expr .) ]
  ! MULTIPLY        [ reduce using rule 44 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expr -> expr LESS_THAN expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 98

    (45) expr -> expr EQEQ expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 45 (expr -> expr EQEQ expr .)
    EQUAL           reduce using rule 45 (expr -> expr EQEQ expr .)
    LSQUAREBR       reduce using rule 45 (expr -> expr EQEQ expr .)
    EQEQ            reduce using rule 45 (expr -> expr EQEQ expr .)
    NEQ             reduce using rule 45 (expr -> expr EQEQ expr .)
    OR              reduce using rule 45 (expr -> expr EQEQ expr .)
    AND             reduce using rule 45 (expr -> expr EQEQ expr .)
    RPAREN          reduce using rule 45 (expr -> expr EQEQ expr .)
    COMMA           reduce using rule 45 (expr -> expr EQEQ expr .)
    RSQUAREBR       reduce using rule 45 (expr -> expr EQEQ expr .)
    COLON           reduce using rule 45 (expr -> expr EQEQ expr .)
    RDBLBR          reduce using rule 45 (expr -> expr EQEQ expr .)
    TO              reduce using rule 45 (expr -> expr EQEQ expr .)
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68

  ! QMARK           [ reduce using rule 45 (expr -> expr EQEQ expr .) ]
  ! PLUS            [ reduce using rule 45 (expr -> expr EQEQ expr .) ]
  ! MINUS           [ reduce using rule 45 (expr -> expr EQEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 45 (expr -> expr EQEQ expr .) ]
  ! DIVIDE          [ reduce using rule 45 (expr -> expr EQEQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 45 (expr -> expr EQEQ expr .) ]
  ! LESS_THAN       [ reduce using rule 45 (expr -> expr EQEQ expr .) ]
  ! GTEQ            [ reduce using rule 45 (expr -> expr EQEQ expr .) ]
  ! LTEQ            [ reduce using rule 45 (expr -> expr EQEQ expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 99

    (46) expr -> expr GTEQ expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 46 (expr -> expr GTEQ expr .)
    EQUAL           reduce using rule 46 (expr -> expr GTEQ expr .)
    LSQUAREBR       reduce using rule 46 (expr -> expr GTEQ expr .)
    GREATER_THAN    reduce using rule 46 (expr -> expr GTEQ expr .)
    LESS_THAN       reduce using rule 46 (expr -> expr GTEQ expr .)
    EQEQ            reduce using rule 46 (expr -> expr GTEQ expr .)
    GTEQ            reduce using rule 46 (expr -> expr GTEQ expr .)
    LTEQ            reduce using rule 46 (expr -> expr GTEQ expr .)
    NEQ             reduce using rule 46 (expr -> expr GTEQ expr .)
    OR              reduce using rule 46 (expr -> expr GTEQ expr .)
    AND             reduce using rule 46 (expr -> expr GTEQ expr .)
    RPAREN          reduce using rule 46 (expr -> expr GTEQ expr .)
    COMMA           reduce using rule 46 (expr -> expr GTEQ expr .)
    RSQUAREBR       reduce using rule 46 (expr -> expr GTEQ expr .)
    COLON           reduce using rule 46 (expr -> expr GTEQ expr .)
    RDBLBR          reduce using rule 46 (expr -> expr GTEQ expr .)
    TO              reduce using rule 46 (expr -> expr GTEQ expr .)
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63

  ! QMARK           [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! PLUS            [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MINUS           [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 100

    (47) expr -> expr LTEQ expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 47 (expr -> expr LTEQ expr .)
    EQUAL           reduce using rule 47 (expr -> expr LTEQ expr .)
    LSQUAREBR       reduce using rule 47 (expr -> expr LTEQ expr .)
    GREATER_THAN    reduce using rule 47 (expr -> expr LTEQ expr .)
    LESS_THAN       reduce using rule 47 (expr -> expr LTEQ expr .)
    EQEQ            reduce using rule 47 (expr -> expr LTEQ expr .)
    GTEQ            reduce using rule 47 (expr -> expr LTEQ expr .)
    LTEQ            reduce using rule 47 (expr -> expr LTEQ expr .)
    NEQ             reduce using rule 47 (expr -> expr LTEQ expr .)
    OR              reduce using rule 47 (expr -> expr LTEQ expr .)
    AND             reduce using rule 47 (expr -> expr LTEQ expr .)
    RPAREN          reduce using rule 47 (expr -> expr LTEQ expr .)
    COMMA           reduce using rule 47 (expr -> expr LTEQ expr .)
    RSQUAREBR       reduce using rule 47 (expr -> expr LTEQ expr .)
    COLON           reduce using rule 47 (expr -> expr LTEQ expr .)
    RDBLBR          reduce using rule 47 (expr -> expr LTEQ expr .)
    TO              reduce using rule 47 (expr -> expr LTEQ expr .)
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63

  ! QMARK           [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! PLUS            [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MINUS           [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 101

    (48) expr -> expr NEQ expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 48 (expr -> expr NEQ expr .)
    EQUAL           reduce using rule 48 (expr -> expr NEQ expr .)
    LSQUAREBR       reduce using rule 48 (expr -> expr NEQ expr .)
    EQEQ            reduce using rule 48 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 48 (expr -> expr NEQ expr .)
    OR              reduce using rule 48 (expr -> expr NEQ expr .)
    AND             reduce using rule 48 (expr -> expr NEQ expr .)
    RPAREN          reduce using rule 48 (expr -> expr NEQ expr .)
    COMMA           reduce using rule 48 (expr -> expr NEQ expr .)
    RSQUAREBR       reduce using rule 48 (expr -> expr NEQ expr .)
    COLON           reduce using rule 48 (expr -> expr NEQ expr .)
    RDBLBR          reduce using rule 48 (expr -> expr NEQ expr .)
    TO              reduce using rule 48 (expr -> expr NEQ expr .)
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68

  ! QMARK           [ reduce using rule 48 (expr -> expr NEQ expr .) ]
  ! PLUS            [ reduce using rule 48 (expr -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 48 (expr -> expr NEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 48 (expr -> expr NEQ expr .) ]
  ! DIVIDE          [ reduce using rule 48 (expr -> expr NEQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 48 (expr -> expr NEQ expr .) ]
  ! LESS_THAN       [ reduce using rule 48 (expr -> expr NEQ expr .) ]
  ! GTEQ            [ reduce using rule 48 (expr -> expr NEQ expr .) ]
  ! LTEQ            [ reduce using rule 48 (expr -> expr NEQ expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 102

    (49) expr -> expr OR expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 49 (expr -> expr OR expr .)
    EQUAL           reduce using rule 49 (expr -> expr OR expr .)
    LSQUAREBR       reduce using rule 49 (expr -> expr OR expr .)
    OR              reduce using rule 49 (expr -> expr OR expr .)
    RPAREN          reduce using rule 49 (expr -> expr OR expr .)
    COMMA           reduce using rule 49 (expr -> expr OR expr .)
    RSQUAREBR       reduce using rule 49 (expr -> expr OR expr .)
    COLON           reduce using rule 49 (expr -> expr OR expr .)
    RDBLBR          reduce using rule 49 (expr -> expr OR expr .)
    TO              reduce using rule 49 (expr -> expr OR expr .)
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    AND             shift and go to state 71

  ! QMARK           [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! MULTIPLY        [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! EQEQ            [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! GTEQ            [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! LTEQ            [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! NEQ             [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 49 (expr -> expr OR expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 70 ]


state 103

    (50) expr -> expr AND expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 50 (expr -> expr AND expr .)
    EQUAL           reduce using rule 50 (expr -> expr AND expr .)
    LSQUAREBR       reduce using rule 50 (expr -> expr AND expr .)
    OR              reduce using rule 50 (expr -> expr AND expr .)
    AND             reduce using rule 50 (expr -> expr AND expr .)
    RPAREN          reduce using rule 50 (expr -> expr AND expr .)
    COMMA           reduce using rule 50 (expr -> expr AND expr .)
    RSQUAREBR       reduce using rule 50 (expr -> expr AND expr .)
    COLON           reduce using rule 50 (expr -> expr AND expr .)
    RDBLBR          reduce using rule 50 (expr -> expr AND expr .)
    TO              reduce using rule 50 (expr -> expr AND expr .)
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69

  ! QMARK           [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! MULTIPLY        [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! EQEQ            [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! GTEQ            [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! LTEQ            [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! NEQ             [ reduce using rule 50 (expr -> expr AND expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 104

    (17) stmt -> PRINT expr SEMI_COLON .

    PRINT           reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    IF              reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    WHILE           reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    DO              reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    FOR             reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    BEGIN           reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    RETURN          reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    LSQUAREBR       reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    NOT             reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    ID              reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    NUMBER          reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    STRING          reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    MSTRING         reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    TRUE            reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    FALSE           reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    NULL            reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    LPAREN          reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    RCURLYEBR       reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    END             reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)
    ELSE            reduce using rule 17 (stmt -> PRINT expr SEMI_COLON .)


state 105

    (18) stmt -> IF LDBLBR expr . RDBLBR stmt
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    RDBLBR          shift and go to state 120
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 106

    (19) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    RPAREN          shift and go to state 121
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 107

    (20) stmt -> WHILE LPAREN expr . RPAREN stmt
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    RPAREN          shift and go to state 122
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 108

    (21) stmt -> DO stmt WHILE . LPAREN expr RPAREN SEMI_COLON

    LPAREN          shift and go to state 123


state 109

    (22) stmt -> FOR LPAREN ID . EQUAL expr TO expr RPAREN stmt

    EQUAL           shift and go to state 124


state 110

    (23) stmt -> BEGIN body END .

    PRINT           reduce using rule 23 (stmt -> BEGIN body END .)
    IF              reduce using rule 23 (stmt -> BEGIN body END .)
    WHILE           reduce using rule 23 (stmt -> BEGIN body END .)
    DO              reduce using rule 23 (stmt -> BEGIN body END .)
    FOR             reduce using rule 23 (stmt -> BEGIN body END .)
    BEGIN           reduce using rule 23 (stmt -> BEGIN body END .)
    RETURN          reduce using rule 23 (stmt -> BEGIN body END .)
    LSQUAREBR       reduce using rule 23 (stmt -> BEGIN body END .)
    NOT             reduce using rule 23 (stmt -> BEGIN body END .)
    ID              reduce using rule 23 (stmt -> BEGIN body END .)
    NUMBER          reduce using rule 23 (stmt -> BEGIN body END .)
    STRING          reduce using rule 23 (stmt -> BEGIN body END .)
    MSTRING         reduce using rule 23 (stmt -> BEGIN body END .)
    TRUE            reduce using rule 23 (stmt -> BEGIN body END .)
    FALSE           reduce using rule 23 (stmt -> BEGIN body END .)
    NULL            reduce using rule 23 (stmt -> BEGIN body END .)
    LPAREN          reduce using rule 23 (stmt -> BEGIN body END .)
    RCURLYEBR       reduce using rule 23 (stmt -> BEGIN body END .)
    END             reduce using rule 23 (stmt -> BEGIN body END .)
    ELSE            reduce using rule 23 (stmt -> BEGIN body END .)


state 111

    (24) stmt -> RETURN expr SEMI_COLON .

    PRINT           reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    IF              reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    WHILE           reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    DO              reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    FOR             reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    BEGIN           reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    RETURN          reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    LSQUAREBR       reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    NOT             reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    ID              reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    NUMBER          reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    STRING          reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    MSTRING         reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    TRUE            reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    FALSE           reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    NULL            reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    LPAREN          reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    RCURLYEBR       reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    END             reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)
    ELSE            reduce using rule 24 (stmt -> RETURN expr SEMI_COLON .)


state 112

    (37) expr -> LSQUAREBR clist RSQUAREBR .

    SEMI_COLON      reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    EQUAL           reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    LSQUAREBR       reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    QMARK           reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    PLUS            reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    MINUS           reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    MULTIPLY        reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    DIVIDE          reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    GREATER_THAN    reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    LESS_THAN       reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    EQEQ            reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    GTEQ            reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    LTEQ            reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    NEQ             reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    OR              reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    AND             reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    RPAREN          reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    COMMA           reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    RSQUAREBR       reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    COLON           reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    RDBLBR          reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)
    TO              reduce using rule 37 (expr -> LSQUAREBR clist RSQUAREBR .)


state 113

    (29) clist -> expr COMMA . clist
    (28) clist -> . expr
    (29) clist -> . expr COMMA clist
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 82
    clist                          shift and go to state 125

state 114

    (52) expr -> ID LPAREN expr RPAREN .

    SEMI_COLON      reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    EQUAL           reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    LSQUAREBR       reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    QMARK           reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    PLUS            reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    MINUS           reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    MULTIPLY        reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    GREATER_THAN    reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    EQEQ            reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    GTEQ            reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    LTEQ            reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    NEQ             reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    OR              reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    AND             reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    RPAREN          reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    COMMA           reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    RSQUAREBR       reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    COLON           reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    RDBLBR          reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)
    TO              reduce using rule 52 (expr -> ID LPAREN expr RPAREN .)


state 115

    (53) expr -> ID LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    EQUAL           reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    QMARK           reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    PLUS            reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    MINUS           reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    MULTIPLY        reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    EQEQ            reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    GTEQ            reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    LTEQ            reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    NEQ             reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    OR              reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    AND             reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    RPAREN          reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    COMMA           reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    COLON           reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    RDBLBR          reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)
    TO              reduce using rule 53 (expr -> ID LPAREN clist RPAREN .)


state 116

    (16) defvar -> ID COLON_COLON type EQUAL . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 126

state 117

    (13) stmt -> expr EQUAL expr SEMI_COLON .

    PRINT           reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    IF              reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    WHILE           reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    DO              reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    FOR             reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    BEGIN           reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    RETURN          reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    LSQUAREBR       reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    NOT             reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    ID              reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    NUMBER          reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    STRING          reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    MSTRING         reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    TRUE            reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    FALSE           reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    NULL            reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    LPAREN          reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    RCURLYEBR       reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    END             reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)
    ELSE            reduce using rule 13 (stmt -> expr EQUAL expr SEMI_COLON .)


state 118

    (36) expr -> expr LSQUAREBR expr RSQUAREBR .

    SEMI_COLON      reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    EQUAL           reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LSQUAREBR       reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    QMARK           reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    PLUS            reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MINUS           reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MULTIPLY        reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    DIVIDE          reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_THAN    reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_THAN       reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    EQEQ            reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GTEQ            reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LTEQ            reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    NEQ             reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    OR              reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    AND             reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RPAREN          reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COMMA           reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RSQUAREBR       reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COLON           reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RDBLBR          reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TO              reduce using rule 36 (expr -> expr LSQUAREBR expr RSQUAREBR .)


state 119

    (38) expr -> expr QMARK expr COLON . expr
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 127

state 120

    (18) stmt -> IF LDBLBR expr RDBLBR . stmt
    (12) stmt -> . expr SEMI_COLON
    (13) stmt -> . expr EQUAL expr SEMI_COLON
    (14) stmt -> . defvar SEMI_COLON
    (17) stmt -> . PRINT expr SEMI_COLON
    (18) stmt -> . IF LDBLBR expr RDBLBR stmt
    (19) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (20) stmt -> . WHILE LPAREN expr RPAREN stmt
    (21) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (22) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (23) stmt -> . BEGIN body END
    (24) stmt -> . RETURN expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (15) defvar -> . ID COLON_COLON type
    (16) defvar -> . ID COLON_COLON type EQUAL expr

    PRINT           shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    BEGIN           shift and go to state 39
    RETURN          shift and go to state 40
    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 27
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 32
    stmt                           shift and go to state 128
    defvar                         shift and go to state 33

state 121

    (19) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (12) stmt -> . expr SEMI_COLON
    (13) stmt -> . expr EQUAL expr SEMI_COLON
    (14) stmt -> . defvar SEMI_COLON
    (17) stmt -> . PRINT expr SEMI_COLON
    (18) stmt -> . IF LDBLBR expr RDBLBR stmt
    (19) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (20) stmt -> . WHILE LPAREN expr RPAREN stmt
    (21) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (22) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (23) stmt -> . BEGIN body END
    (24) stmt -> . RETURN expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (15) defvar -> . ID COLON_COLON type
    (16) defvar -> . ID COLON_COLON type EQUAL expr

    PRINT           shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    BEGIN           shift and go to state 39
    RETURN          shift and go to state 40
    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 27
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 32
    stmt                           shift and go to state 129
    defvar                         shift and go to state 33

state 122

    (20) stmt -> WHILE LPAREN expr RPAREN . stmt
    (12) stmt -> . expr SEMI_COLON
    (13) stmt -> . expr EQUAL expr SEMI_COLON
    (14) stmt -> . defvar SEMI_COLON
    (17) stmt -> . PRINT expr SEMI_COLON
    (18) stmt -> . IF LDBLBR expr RDBLBR stmt
    (19) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (20) stmt -> . WHILE LPAREN expr RPAREN stmt
    (21) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (22) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (23) stmt -> . BEGIN body END
    (24) stmt -> . RETURN expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (15) defvar -> . ID COLON_COLON type
    (16) defvar -> . ID COLON_COLON type EQUAL expr

    PRINT           shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    BEGIN           shift and go to state 39
    RETURN          shift and go to state 40
    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 27
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 32
    stmt                           shift and go to state 130
    defvar                         shift and go to state 33

state 123

    (21) stmt -> DO stmt WHILE LPAREN . expr RPAREN SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 131

state 124

    (22) stmt -> FOR LPAREN ID EQUAL . expr TO expr RPAREN stmt
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 132

state 125

    (29) clist -> expr COMMA clist .

    RSQUAREBR       reduce using rule 29 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 29 (clist -> expr COMMA clist .)


state 126

    (16) defvar -> ID COLON_COLON type EQUAL expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 16 (defvar -> ID COLON_COLON type EQUAL expr .)
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 127

    (38) expr -> expr QMARK expr COLON expr .
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    EQUAL           reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    LSQUAREBR       reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    PLUS            reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    MINUS           reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    MULTIPLY        reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    DIVIDE          reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    GREATER_THAN    reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    LESS_THAN       reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    EQEQ            reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    GTEQ            reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    LTEQ            reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    NEQ             reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    OR              reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    AND             reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    RPAREN          reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    COMMA           reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    RSQUAREBR       reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    COLON           reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    RDBLBR          reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    TO              reduce using rule 38 (expr -> expr QMARK expr COLON expr .)
    QMARK           shift and go to state 59

  ! QMARK           [ reduce using rule 38 (expr -> expr QMARK expr COLON expr .) ]
  ! LSQUAREBR       [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! MULTIPLY        [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! GREATER_THAN    [ shift and go to state 64 ]
  ! LESS_THAN       [ shift and go to state 65 ]
  ! EQEQ            [ shift and go to state 66 ]
  ! GTEQ            [ shift and go to state 67 ]
  ! LTEQ            [ shift and go to state 68 ]
  ! NEQ             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 128

    (18) stmt -> IF LDBLBR expr RDBLBR stmt .

    PRINT           reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    IF              reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    WHILE           reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    DO              reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    FOR             reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    BEGIN           reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    RETURN          reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    LSQUAREBR       reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    NOT             reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    ID              reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    NUMBER          reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    STRING          reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    MSTRING         reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    TRUE            reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    FALSE           reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    NULL            reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    LPAREN          reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    RCURLYEBR       reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    END             reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)
    ELSE            reduce using rule 18 (stmt -> IF LDBLBR expr RDBLBR stmt .)


state 129

    (19) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt

    ELSE            shift and go to state 133


state 130

    (20) stmt -> WHILE LPAREN expr RPAREN stmt .

    PRINT           reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    DO              reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BEGIN           reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LSQUAREBR       reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ID              reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    MSTRING         reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    TRUE            reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FALSE           reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NULL            reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RCURLYEBR       reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    END             reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 20 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 131

    (21) stmt -> DO stmt WHILE LPAREN expr . RPAREN SEMI_COLON
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    RPAREN          shift and go to state 134
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 132

    (22) stmt -> FOR LPAREN ID EQUAL expr . TO expr RPAREN stmt
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    TO              shift and go to state 135
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 133

    (19) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (12) stmt -> . expr SEMI_COLON
    (13) stmt -> . expr EQUAL expr SEMI_COLON
    (14) stmt -> . defvar SEMI_COLON
    (17) stmt -> . PRINT expr SEMI_COLON
    (18) stmt -> . IF LDBLBR expr RDBLBR stmt
    (19) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (20) stmt -> . WHILE LPAREN expr RPAREN stmt
    (21) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (22) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (23) stmt -> . BEGIN body END
    (24) stmt -> . RETURN expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (15) defvar -> . ID COLON_COLON type
    (16) defvar -> . ID COLON_COLON type EQUAL expr

    PRINT           shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    BEGIN           shift and go to state 39
    RETURN          shift and go to state 40
    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 27
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 32
    stmt                           shift and go to state 136
    defvar                         shift and go to state 33

state 134

    (21) stmt -> DO stmt WHILE LPAREN expr RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 137


state 135

    (22) stmt -> FOR LPAREN ID EQUAL expr TO . expr RPAREN stmt
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN

    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 49
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 138

state 136

    (19) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    PRINT           reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    IF              reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    DO              reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FOR             reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BEGIN           reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RETURN          reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LSQUAREBR       reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NOT             reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ID              reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NUMBER          reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    STRING          reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    MSTRING         reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    TRUE            reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FALSE           reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NULL            reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LPAREN          reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RCURLYEBR       reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    END             reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 137

    (21) stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .

    PRINT           reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    IF              reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    WHILE           reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    DO              reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    FOR             reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    BEGIN           reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    RETURN          reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    LSQUAREBR       reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    NOT             reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    ID              reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    NUMBER          reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    STRING          reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    MSTRING         reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    TRUE            reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    FALSE           reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    NULL            reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    RCURLYEBR       reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    END             reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)
    ELSE            reduce using rule 21 (stmt -> DO stmt WHILE LPAREN expr RPAREN SEMI_COLON .)


state 138

    (22) stmt -> FOR LPAREN ID EQUAL expr TO expr . RPAREN stmt
    (36) expr -> expr . LSQUAREBR expr RSQUAREBR
    (38) expr -> expr . QMARK expr COLON expr
    (39) expr -> expr . PLUS expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . MULTIPLY expr
    (42) expr -> expr . DIVIDE expr
    (43) expr -> expr . GREATER_THAN expr
    (44) expr -> expr . LESS_THAN expr
    (45) expr -> expr . EQEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . NEQ expr
    (49) expr -> expr . OR expr
    (50) expr -> expr . AND expr

    RPAREN          shift and go to state 139
    LSQUAREBR       shift and go to state 58
    QMARK           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    GREATER_THAN    shift and go to state 64
    LESS_THAN       shift and go to state 65
    EQEQ            shift and go to state 66
    GTEQ            shift and go to state 67
    LTEQ            shift and go to state 68
    NEQ             shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 139

    (22) stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN . stmt
    (12) stmt -> . expr SEMI_COLON
    (13) stmt -> . expr EQUAL expr SEMI_COLON
    (14) stmt -> . defvar SEMI_COLON
    (17) stmt -> . PRINT expr SEMI_COLON
    (18) stmt -> . IF LDBLBR expr RDBLBR stmt
    (19) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (20) stmt -> . WHILE LPAREN expr RPAREN stmt
    (21) stmt -> . DO stmt WHILE LPAREN expr RPAREN SEMI_COLON
    (22) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (23) stmt -> . BEGIN body END
    (24) stmt -> . RETURN expr SEMI_COLON
    (36) expr -> . expr LSQUAREBR expr RSQUAREBR
    (37) expr -> . LSQUAREBR clist RSQUAREBR
    (38) expr -> . expr QMARK expr COLON expr
    (39) expr -> . expr PLUS expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr MULTIPLY expr
    (42) expr -> . expr DIVIDE expr
    (43) expr -> . expr GREATER_THAN expr
    (44) expr -> . expr LESS_THAN expr
    (45) expr -> . expr EQEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr NEQ expr
    (49) expr -> . expr OR expr
    (50) expr -> . expr AND expr
    (51) expr -> . NOT expr
    (52) expr -> . ID LPAREN expr RPAREN
    (53) expr -> . ID LPAREN clist RPAREN
    (54) expr -> . ID
    (55) expr -> . NUMBER
    (56) expr -> . STRING
    (57) expr -> . MSTRING
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (15) defvar -> . ID COLON_COLON type
    (16) defvar -> . ID COLON_COLON type EQUAL expr

    PRINT           shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    BEGIN           shift and go to state 39
    RETURN          shift and go to state 40
    LSQUAREBR       shift and go to state 41
    NOT             shift and go to state 42
    ID              shift and go to state 27
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    MSTRING         shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    LPAREN          shift and go to state 28

    expr                           shift and go to state 32
    stmt                           shift and go to state 140
    defvar                         shift and go to state 33

state 140

    (22) stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .

    PRINT           reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    IF              reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    WHILE           reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    DO              reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    FOR             reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    BEGIN           reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    LSQUAREBR       reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    NOT             reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    ID              reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    NUMBER          reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    STRING          reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    MSTRING         reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    TRUE            reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    FALSE           reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    NULL            reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    LPAREN          reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    RCURLYEBR       reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    END             reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 22 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 85 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (func_list -> func)
WARNING: rejected rule (func_list -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 31 resolved using rule (stmt_list -> stmt)
WARNING: rejected rule (stmt_list -> <empty>) in state 31
